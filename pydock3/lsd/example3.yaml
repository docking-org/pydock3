### docking_campaign.yml

lsd_base: /nfs/home/btingle/lsd
lsd_path: /nfs/soft/dock/versions/pydock3/pydock3/lsd/lsd.py

queues:
  - name: slurm
    preset: slurm
    slurm_bin_path: /bin
    slurm_opts: --time=2:00:00

  - name: aws
    preset: aws
    aws_secret_key: 1234j1hb3fkluicaosq23odfqq34r==+
    aws_access_key: ADFJOP134FDASJI
    aws_region: us-east-1
    aws_s3_bucket: btingleprodbucket

dockfiles:
  - name: 5HT2A
    path: /nfs/home/btingle/dockfiles

  - name: 5HT2A_flex
    path: /nfs/home/btingle/dockfiles_flex

sdi:
  - name: sdi-h17
    path: z22://h17m500-h17p390/db2

  - name: sdi-h18
    path: z22://h18m500-h18p390/db2

  - name: sdi-h20
    path: z22://h20p100-h20p390/db2

  - name: sdi-custom
    path: /nfs/home/btingle/sdi.txt

lsd:
  - name: lsd-init-1
    sdi: [sdi-h17, sdi-h18]
    dockfiles: 5HT2A
    queue: slurm

  - name: lsd-init-2 # define a portion of the run to take place on aws
    sdi: [sdi-h20]
    dockfiles: 5HT2A
    queue: aws

  - name: lsd-fin
    rescore: true
    poses: [top-init]
    dockfiles: 5HT2A
    queue: slurm

top:
  - name: top-init
    poses: [lsd-init-1, lsd-init-2]
    n: 300000

  # default behaviour is to never aggregate results originating from separate sdi files, e.g top-init will create 3 separate poses files even though it recieves 2 lsd runs as input, because those 2 lsd runs contain 3 sdi units total
  # this can be circumvented through the %agg modifier if desired
  # for example, the below code defines a top poses run that harvests the results of the 3 poses files produced by top-init and the 3 poses files produced by top-fin into one file a piece for a total of 2 files
  - name: top-init-agg
    poses: [top-init, top-fin]
    n: 5000

  - name: top-fin
    poses: [lsd-fin]
    n: 5000